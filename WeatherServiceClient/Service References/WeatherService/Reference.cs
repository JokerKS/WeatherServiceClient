//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherServiceClient.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceException", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WeatherServiceClient.WeatherService.CityNotFound))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WeatherServiceClient.WeatherService.UniqueClientIdNotFound))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WeatherServiceClient.WeatherService.ServerHasNoWeatherData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WeatherServiceClient.WeatherService.CountryNotFound))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WeatherServiceClient.WeatherService.NotCorrectLoginOrPassword))]
    public partial class ServiceException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class CityNotFound : WeatherServiceClient.WeatherService.ServiceException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UniqueClientIdNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class UniqueClientIdNotFound : WeatherServiceClient.WeatherService.ServiceException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerHasNoWeatherData", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class ServerHasNoWeatherData : WeatherServiceClient.WeatherService.ServiceException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class CountryNotFound : WeatherServiceClient.WeatherService.ServiceException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotCorrectLoginOrPassword", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class NotCorrectLoginOrPassword : WeatherServiceClient.WeatherService.ServiceException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OpenWeather", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class OpenWeather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.Clouds CloudsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.Forecast ForecastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.Wind WindField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.Clouds Clouds {
            get {
                return this.CloudsField;
            }
            set {
                if ((object.ReferenceEquals(this.CloudsField, value) != true)) {
                    this.CloudsField = value;
                    this.RaisePropertyChanged("Clouds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.Forecast Forecast {
            get {
                return this.ForecastField;
            }
            set {
                if ((object.ReferenceEquals(this.ForecastField, value) != true)) {
                    this.ForecastField = value;
                    this.RaisePropertyChanged("Forecast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.Wind Wind {
            get {
                return this.WindField;
            }
            set {
                if ((object.ReferenceEquals(this.WindField, value) != true)) {
                    this.WindField = value;
                    this.RaisePropertyChanged("Wind");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Clouds", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class Clouds : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CloudinessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.OpenWeather OpenWeatherField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityID {
            get {
                return this.CityIDField;
            }
            set {
                if ((this.CityIDField.Equals(value) != true)) {
                    this.CityIDField = value;
                    this.RaisePropertyChanged("CityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cloudiness {
            get {
                return this.CloudinessField;
            }
            set {
                if ((this.CloudinessField.Equals(value) != true)) {
                    this.CloudinessField = value;
                    this.RaisePropertyChanged("Cloudiness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.OpenWeather OpenWeather {
            get {
                return this.OpenWeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenWeatherField, value) != true)) {
                    this.OpenWeatherField = value;
                    this.RaisePropertyChanged("OpenWeather");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Forecast", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class Forecast : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.OpenWeather OpenWeatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TempMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TempMinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityID {
            get {
                return this.CityIDField;
            }
            set {
                if ((this.CityIDField.Equals(value) != true)) {
                    this.CityIDField = value;
                    this.RaisePropertyChanged("CityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.OpenWeather OpenWeather {
            get {
                return this.OpenWeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenWeatherField, value) != true)) {
                    this.OpenWeatherField = value;
                    this.RaisePropertyChanged("OpenWeather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temp {
            get {
                return this.TempField;
            }
            set {
                if ((this.TempField.Equals(value) != true)) {
                    this.TempField = value;
                    this.RaisePropertyChanged("Temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TempMax {
            get {
                return this.TempMaxField;
            }
            set {
                if ((this.TempMaxField.Equals(value) != true)) {
                    this.TempMaxField = value;
                    this.RaisePropertyChanged("TempMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TempMin {
            get {
                return this.TempMinField;
            }
            set {
                if ((this.TempMinField.Equals(value) != true)) {
                    this.TempMinField = value;
                    this.RaisePropertyChanged("TempMin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Wind", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
    [System.SerializableAttribute()]
    public partial class Wind : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherServiceClient.WeatherService.OpenWeather OpenWeatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityID {
            get {
                return this.CityIDField;
            }
            set {
                if ((this.CityIDField.Equals(value) != true)) {
                    this.CityIDField = value;
                    this.RaisePropertyChanged("CityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherServiceClient.WeatherService.OpenWeather OpenWeather {
            get {
                return this.OpenWeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenWeatherField, value) != true)) {
                    this.OpenWeatherField = value;
                    this.RaisePropertyChanged("OpenWeather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeather", CallbackContract=typeof(WeatherServiceClient.WeatherService.IWeatherCallback))]
    public interface IWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/LogInToService", ReplyAction="http://tempuri.org/IWeather/LogInToServiceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.NotCorrectLoginOrPassword), Action="http://tempuri.org/IWeather/LogInToServiceNotCorrectLoginOrPasswordFault", Name="NotCorrectLoginOrPassword", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        string LogInToService(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/LogInToService", ReplyAction="http://tempuri.org/IWeather/LogInToServiceResponse")]
        System.Threading.Tasks.Task<string> LogInToServiceAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetCityIdByName", ReplyAction="http://tempuri.org/IWeather/GetCityIdByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.CityNotFound), Action="http://tempuri.org/IWeather/GetCityIdByNameCityNotFoundFault", Name="CityNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        int GetCityIdByName(string name, string countryCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/GetCityIdByName", ReplyAction="http://tempuri.org/IWeather/GetCityIdByNameResponse")]
        System.Threading.Tasks.Task<int> GetCityIdByNameAsync(string name, string countryCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityName", ReplyAction="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.CityNotFound), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameCityNotFoundFault", Name="CityNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.UniqueClientIdNotFound), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameUniqueClientIdNotFoundFau" +
            "lt", Name="UniqueClientIdNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.ServerHasNoWeatherData), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameServerHasNoWeatherDataFau" +
            "lt", Name="ServerHasNoWeatherData", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.CountryNotFound), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameCountryNotFoundFault", Name="CountryNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        void RegisterForUpdatesByCityName(string uniqueId, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityName", ReplyAction="http://tempuri.org/IWeather/RegisterForUpdatesByCityNameResponse")]
        System.Threading.Tasks.Task RegisterForUpdatesByCityNameAsync(string uniqueId, string city, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityId", ReplyAction="http://tempuri.org/IWeather/RegisterForUpdatesByCityIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.CityNotFound), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityIdCityNotFoundFault", Name="CityNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.UniqueClientIdNotFound), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityIdUniqueClientIdNotFoundFault" +
            "", Name="UniqueClientIdNotFound", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        [System.ServiceModel.FaultContractAttribute(typeof(WeatherServiceClient.WeatherService.ServerHasNoWeatherData), Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityIdServerHasNoWeatherDataFault" +
            "", Name="ServerHasNoWeatherData", Namespace="http://schemas.datacontract.org/2004/07/WcfWeatherService")]
        void RegisterForUpdatesByCityId(string uniqueId, int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeather/RegisterForUpdatesByCityId", ReplyAction="http://tempuri.org/IWeather/RegisterForUpdatesByCityIdResponse")]
        System.Threading.Tasks.Task RegisterForUpdatesByCityIdAsync(string uniqueId, int cityId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWeather/WeatherUpdate")]
        void WeatherUpdate(WeatherServiceClient.WeatherService.OpenWeather weather);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherChannel : WeatherServiceClient.WeatherService.IWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherClient : System.ServiceModel.DuplexClientBase<WeatherServiceClient.WeatherService.IWeather>, WeatherServiceClient.WeatherService.IWeather {
        
        public WeatherClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WeatherClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WeatherClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string LogInToService(string login, string password) {
            return base.Channel.LogInToService(login, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInToServiceAsync(string login, string password) {
            return base.Channel.LogInToServiceAsync(login, password);
        }
        
        public int GetCityIdByName(string name, string countryCode) {
            return base.Channel.GetCityIdByName(name, countryCode);
        }
        
        public System.Threading.Tasks.Task<int> GetCityIdByNameAsync(string name, string countryCode) {
            return base.Channel.GetCityIdByNameAsync(name, countryCode);
        }
        
        public void RegisterForUpdatesByCityName(string uniqueId, string city, string country) {
            base.Channel.RegisterForUpdatesByCityName(uniqueId, city, country);
        }
        
        public System.Threading.Tasks.Task RegisterForUpdatesByCityNameAsync(string uniqueId, string city, string country) {
            return base.Channel.RegisterForUpdatesByCityNameAsync(uniqueId, city, country);
        }
        
        public void RegisterForUpdatesByCityId(string uniqueId, int cityId) {
            base.Channel.RegisterForUpdatesByCityId(uniqueId, cityId);
        }
        
        public System.Threading.Tasks.Task RegisterForUpdatesByCityIdAsync(string uniqueId, int cityId) {
            return base.Channel.RegisterForUpdatesByCityIdAsync(uniqueId, cityId);
        }
    }
}
